import os
import time
import psutil
from collections import defaultdict
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import concurrent.futures
import threading

THRESHOLD = 10
MAX_THREADS = 4

class RansomwareFileHandler(FileSystemEventHandler):
    def __init__(self, valid_extensions, executor):
        super().__init__()
        self.file_changes = defaultdict(int)
        self.lock = threading.Lock()
        self.valid_extensions = valid_extensions
        self.executor = executor

    def on_modified(self, event):
        if event.is_directory:
            return

        if any(event.src_path.endswith(ext) for ext in self.valid_extensions):
            self.executor.submit(self.process_file_change, event.src_path)

    def process_file_change(self, path):
        with self.lock:
            self.file_changes[path] += 1

class EDR:
    def __init__(self):
        self.suspicious_pids = set()
        self.lock = threading.Lock()
        self.valid_extensions = (".txt", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".pdf", ".jpg", ".png", ".bmp", ".gif", ".mp3", ".mp4")
        self.executor = concurrent.futures.ThreadPoolExecutor(MAX_THREADS)
        self.file_handler = RansomwareFileHandler(self.valid_extensions, self.executor)

    def start(self):
        print('/////////////////////////////////')
        print('-------- Iniciando EDR ---------')
        print('---------------------------------')
        print('')
        pastas_monitoradas = [os.path.expanduser(f"~/{folder}") for folder in ["Desktop", "Documents", "Downloads"]]

        self.create_honeypot_files()  # Chama a função de criação de honeypots

        try:
            self.start_observer(pastas_monitoradas)
            print('EDR iniciado')
            while True:
                time.sleep(1)
                with self.lock:
                    self.identificar_processos_suspeitos()
        except KeyboardInterrupt:
            self.stop_observer()
            print('/////////////////////////////////')
            print('--------- Finalizando EDR ---------')
            print('---------------------------------')
            print('')
            print('EDR finalizado')

    def start_observer(self, pastas_monitoradas):
        self.file_handler_observer = Observer()
        for pasta in pastas_monitoradas:
            self.file_handler_observer.schedule(self.file_handler, pasta, recursive=True)
        self.file_handler_observer.start()

    def stop_observer(self):
        if self.file_handler_observer:
            self.file_handler_observer.stop()
            self.file_handler_observer.join()

    def identificar_processos_suspeitos(self):
        with self.file_handler.lock:
            for path, mudanca in self.file_handler.file_changes.items():
                if mudanca >= THRESHOLD:
                    for processo in psutil.process_iter(['pid', 'name']):
                        try:
                            processo_info = processo.info
                            pid = processo_info['pid']
                            if self.processo_interagindo_arquivo(pid, path):
                                with self.lock:
                                    self.suspicious_pids.add(pid)
                        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                            pass

    def processo_interagindo_arquivo(self, pid, path_arquivo):
        try:
            processo = psutil.Process(pid)
            abrir_arquivos = processo.open_files()
            for arquivo in abrir_arquivos:
                if path_arquivo == arquivo.path:
                    return True
            return False
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            return False

    def finalizar_processos_suspeitos(self):
        for pid in self.suspicious_pids:
            try:
                process = psutil.Process(pid)
                process.terminate()
                print(f"Processo com PID {pid} finalizado.")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass

    def create_honeypot_files(self):
        honeypot_files = []
        desktop_path = os.path.expandvars("%USERPROFILE%\\Desktop")

        honeypot_base_path = os.path.join(desktop_path, "Honeypots")
        # Crie um diretório base se ele não existir
        if not os.path.exists(honeypot_base_path):
            os.makedirs(honeypot_base_path)
            print('/////////////////////////////////')
            print('--- Criando honeypots ---')
            print('---------------------------------')
            print('')

        for i in range(1, 6):
            honeypot_file = os.path.join(honeypot_base_path, f"Honeypot{i}.txt")
            honeypot_files.append(honeypot_file)

            # Crie os arquivos das armadilhas
            with open(honeypot_file, "w") as f:
                f.write("This is a honeypot file. Do not access it.")

        print('---------------------------------')
        print('----- Honeypots criados -----')
        print('---------------------------------')
        print('')

if __name__ == '__main__':
    try:
        edr = EDR()
        edr.start()
    except Exception as e:
        print(f"Erro inesperado: {e}")
