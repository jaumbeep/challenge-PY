import os
import time
import psutil
from collections import defaultdict
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import concurrent.futures  
import threading

LIMIAR = 10
MAX_THREADS = 4  

class ManipuladorArquivosRansomware(FileSystemEventHandler):
    def __init__(self, extensoes_validas, executor):
        super().__init__()
        self.mudancas_arquivo = defaultdict(int)
        self.trava = threading.Lock()
        self.extensoes_validas = extensoes_validas
        self.observador = None
        self.executor = executor

    def iniciar_observador(self, caminho):
        self.observador = Observer()
        self.observador.schedule(self, caminho, recursive=True)
        self.observador.start()

    def parar_observador(self):
        if self.observador:
            self.observador.stop()
            self.observador.join()

    def on_modified(self, evento):
        if evento.is_directory:
            return
        
        if any(evento.src_path.endswith(ext) for ext in self.extensoes_validas):
            self.executor.submit(self.processar_mudanca_arquivo, evento.src_path)

    def processar_mudanca_arquivo(self, caminho):
        with self.trava:
            self.mudancas_arquivo[caminho] += 1

class Honeypot(FileSystemEventHandler):
    def __init__(self, arquivos_honeypot):
        super().__init__()
        self.arquivos_honeypot = arquivos_honeypot

    def on_access(self, evento):
        if evento.src_path in self.arquivos_honeypot:
            print(f"Acesso ao arquivo honeypot: {evento.src_path}")

class EDR:
    def __init__(self):
        self.pids_suspeitos = set()
        self.trava = threading.Lock()
        self.extensoes_validas = (".txt", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".pdf", ".jpg", ".png", ".bmp", ".gif", ".mp3", ".mp4")
        self.executor = concurrent.futures.ThreadPoolExecutor(MAX_THREADS)
        self.manipulador_arquivos = ManipuladorArquivosRansomware(self.extensoes_validas, self.executor)
        self.arquivos_honeypot = self.criar_arquivos_honeypot()
        self.honeypot = Honeypot(self.arquivos_honeypot)
        self.observador_manipulador_arquivos = None
        self.iniciar()

    def iniciar(self):
        try:
            print('/////////////////////////////////')
            print('---------------------------------')
            print('--------> EDR iniciando <--------')
            print('---------------------------------')
            print('')
            print('/////////////////////////////////')
            print('')
            pastas_monitoradas = [
                os.path.expandvars("%USERPROFILE%\\Desktop"),
                os.path.expandvars("%USERPROFILE%\\Documents"),
                os.path.expandvars("%USERPROFILE%\\Downloads")
            ]

            self.manipulador_arquivos.iniciar_observador(pastas_monitoradas)

            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        except Exception as e:
            print(f"Erro inesperado em iniciar(): {e}")

    def criar_arquivos_honeypot(self):
        arquivos_honeypot = []
        caminho_area_trabalho = os.path.expandvars("%USERPROFILE%\\Desktop")
        
        for i in range(1, 6):
            arquivo_honeypot = os.path.join(caminho_area_trabalho, f"Honeypot{i}.txt")
            with open(arquivo_honeypot, "w") as f:
                f.write("Este é um arquivo honeypot. Não acesse.")
            arquivos_honeypot.append(arquivo_honeypot)
        
        return arquivos_honeypot

    def iniciar_observador_manipulador_arquivos(self, caminhos):
        self.observador_manipulador_arquivos = Observer()
        for caminho in caminhos:
            manipulador = self.manipulador_arquivos
            self.observador_manipulador_arquivos.schedule(manipulador, caminho, recursive=True)
            manipulador.iniciar_observador(caminho)
        self.observador_manipulador_arquivos.start()

        print('---------------------------------')
        print('--------> EDR iniciado <---------')
        print('---------------------------------')
        print('/////////////////////////////////')
        print('')

    def monitorar_pastas(self, caminhos):
        observadores = []

        for caminho in caminhos:
            observador = Observer()
            observador.schedule(self.manipulador_arquivos, caminho, recursive=True)
            observador.start()
            observadores.append(observador)

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            for observador in observadores:
                observador.stop()
            for observador in observadores:
                observador.join()

    def rodar_detector(self):
        try:
            while True:
                time.sleep(10)
                with self.trava:
                    self.identificar_processos_suspeitos()
        except KeyboardInterrupt:
            pass

    def identificar_processos_suspeitos(self):
        try:
            with self.manipulador_arquivos.trava:
                for caminho, mudanca in self.manipulador_arquivos.mudancas_arquivo.items():
                    if mudanca >= LIMIAR:
                        self.executor.submit(self.processar_arquivo_suspeito, caminho)
        except Exception as e:
            print(f"Erro em identificar_processos_suspeitos(): {e}")

if __name__ == '__main__':
    try:
        edr = EDR()
        edr.iniciar()
    except Exception as e:
        print(f"Erro inesperado: {e}")
