import threading
import time
from watchdog.observers import Observer
from manipulador_arquivos import RansomwareFileHandler
import psutil
import os

class EDR:
    def __init__(self):
        self.suspicious_pids = set()
        self.lock = threading.Lock()
        self.file_changes_lock = threading.Lock()
        self.manipulador_arquivos = RansomwareFileHandler()

    def start(self):
        pastas_monitoradas = [
            os.path.expanduser("\\Área de Trabalho"),
            os.path.expanduser("\\Documentos"),
            os.path.expanduser("\\Downloads")
        ]

        monitor_pastas_thread = threading.Thread(target=self.monitoramento_pastas, args=(pastas_monitoradas,))
        detector_thread = threading.Thread(target=self.rodar_detector)
        finalizacao_thread = threading.Thread(target=self.finalizar_processos_suspeitos)

        monitor_pastas_thread.start()
        detector_thread.start()

        try:
            monitor_pastas_thread.join()
            detector_thread.join()
            finalizacao_thread.join()
        except KeyboardInterrupt:
            pass

    def monitoramento_pastas(self, paths):
        observers = []

        for path in paths:
            event_handler = self.file_handler
            observer = Observer()
            observer.schedule(event_handler, path, recursive=True)
            observer.start()
            observers.append(observer)

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            for observer in observers:
                observer.stop()
            for observer in observers:
                observer.join()

    def rodar_detector(self):
        try:
            while True:
                time.sleep(10)
                with self.lock:
                    self.identificar_processos_suspeitos()
        except KeyboardInterrupt:
            pass

    def identificar_processos_suspeitos(self, threshold=10):
        with self.file_changes_lock:
            for path, mudanca in self.file_handler.file_changes.items():
                if mudanca >= threshold:
                    for processo in psutil.process_iter(['pid', 'name']):
                        try:
                            processo_info = processo.info
                            pid = processo_info['pid']
                            if self.processo_interagindo_arquivo(pid, path):
                                with self.lock:
                                    self.suspicious_pids.add(pid)
                        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                            pass

    def processo_interagindo_arquivo(self, pid, path_arquivo):
        try:
            processo = psutil.Process(pid)
            abrir_arquivos = processo.open_files()
            for arquivo in abrir_arquivos:
                if path_arquivo == arquivo.path:
                    return True
            return False
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            return False

    def finalizar_processos_suspeitos(self):
        for pid in self.suspicious_pids:
            try:
                process = psutil.Process(pid)
                process.terminate()
                print(f"Processo com PID {pid} finalizado.")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
